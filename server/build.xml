<!--
 Copyright (c) 2000-2006, Identyx Corporation.
 All rights reserved.
-->
<project name="penrose-server" default="build">

    <description>Penrose Server</description>

    <property file="../build.properties"/>
    <property name="prefix" value=""/>
    <property name="iscc.path" value="ISCC.exe"/>
    <property name="cygwin.home" value="c:/cygwin"/>

    <property name="module.name" value="${product.name}-server"/>
    <property name="project.dist" value="../dist"/>

    <property name="penrose.home" value="${prefix}/usr/local/${module.name}-${product.version}"/>
    <property name="docs.target" value="${project.dist}/javadoc"/>

    <tstamp>
        <format property="TIMESTAMP" pattern="yyyyMMddHHmmss"/>
    </tstamp>

    <path id="lib.path">
        <fileset dir="lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="../lib">
            <include name="*.jar"/>
        </fileset>
        <pathelement location="../core/target/classes"/>
    </path>

    <path id="main.path">
        <pathelement location="target/classes"/>
    </path>

    <path id="project.classpath">
        <fileset dir="svnant">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <target name="init">
        <echo message="Operating System: ${os.name} ${os.version} (${os.arch})" />
        <echo message="Java Version: ${java.version}" />
        <condition property="isWindows">
            <os family="windows"/>
        </condition>
        <condition property="isUnix">
            <and>
                <os family="unix"/>
                <not>
                    <os family="mac"/>
                </not>
            </and>
        </condition>
        <condition property="isMac">
            <os family="mac"/>
        </condition>
    </target>

    <target name="compile" depends="init">
        <echo message="Compiling ${product.title} Server."/>
        <mkdir dir="target/classes"/>
        <javac
            srcdir="src/java"
            destdir="target/classes"
            classpathref="lib.path"
            debug="on"
            debuglevel="lines,vars,source"
            source="1.5"
            target="1.5"
        />
        <copy todir="target/classes">
            <fileset dir="src/java" includes="**/*.properties,**/*.xml,**/*.dtd"/>
        </copy>
    </target>

    <target name="build" depends="compile">
        <echo message="Building ${product.title} Server."/>
        <jar jarfile="target/${module.name}-${product.version}.jar">
            <fileset dir="target/classes"/>
            <manifest>
              <attribute name="Specification-Version"  value="${product.specification}"/>
              <attribute name="Implementation-Title"   value="${product.title} Server"/>
              <attribute name="Implementation-Version" value="${product.version}"/>
              <attribute name="Implementation-Vendor"  value="${vendor.name}"/>
              <attribute name="Build-Date" value="${TIMESTAMP}"/>
            </manifest>
        </jar>
        <ant dir="../services" target="build"/>
        <ant dir="../samples" target="build"/>
    </target>

    <target name="docs" depends="init">
        <mkdir dir="target/javadoc"/>
        <javadoc packagenames="org.safehaus.penrose.*"
            sourcepath="src/java"
            destdir="target/javadoc"
            classpathref="lib.path">
            <sourcepath>
                <pathelement path="src/java"/>
                <pathelement path="../core/src/java"/>
            </sourcepath>
        </javadoc>
    </target>

    <target name="dist" depends="build">
        <mkdir dir="target/dist"/>
        <copy todir="target/dist" file="../build.properties"/>
        <copy todir="target/dist" file="../README.txt">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <copy todir="target/dist" file="../LICENSE.txt"/>
        <copy todir="target/dist" file="../COPYING.txt"/>
        <copy todir="target/dist" file="../INSTALL-BINARY.txt">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <copy todir="target/dist" file="../pom.xml">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <copy todir="target/dist/etc">
            <fileset dir="etc" includes="**/*"/>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
<!--
        <copy todir="target/dist/config">
            <fileset dir="config" includes="**/*"/>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
-->
        <chmod file="target/dist/etc/init.d/penrose" perm="ugo+rx"/>
        <mkdir dir="target/dist/db"/>
        <copy todir="target/dist/docs">
            <fileset dir="../docs" includes="*.url"/>
        </copy>
        <copy todir="target/dist/docs/javadoc" failonerror="false">
            <fileset dir="target/javadoc"/>
        </copy>
        <copy todir="target/dist/lib" includeEmptyDirs="false">
            <fileset dir="../lib" includes="*"/>
        </copy>
        <mkdir dir="target/dist/lib/ext"/>
        <mkdir dir="target/dist/logs"/>
        <copy todir="target/dist/server/lib" includeEmptyDirs="false">
            <fileset dir="lib" includes="*"/>
            <fileset dir="target" includes="${module.name}-${product.version}.jar"/>
        </copy>
        <mkdir dir="target/dist/server/lib/ext"/>
        <copy todir="target/dist/server/lib" includeEmptyDirs="false">
            <fileset dir="lib" includes="*"/>
            <fileset dir="target" includes="${module.name}-${product.version}.jar"/>
        </copy>
        <copy todir="target/dist/conf">
            <fileset dir="conf"/>
            <fileset dir="../conf"/>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <mkdir dir="target/dist/schema/ext"/>
        <copy todir="target/dist/schema">
            <fileset dir="../schema"/>
        </copy>
        <copy todir="target/dist"
            file="../images/penrose.ico">
        </copy>
        <copy todir="target/dist/bin">
            <fileset dir="bin"/>
        </copy>
        <fixcrlf
            srcdir="target/dist"
            includes="**/*.sh"
            eol="unix"
        />
        <chmod dir="target/dist/bin" perm="ugo+rx" includes="**/*.sh"/>
        <copy todir="target/dist/dtd" flatten="true">
            <fileset dir="src" includes="**/*.dtd"/>
            <fileset dir="../core/src" includes="**/*.dtd"/>
        </copy>
        <mkdir dir="target/dist/partitions"/>
        <copy todir="target/dist/partitions">
            <fileset dir="../partitions"/>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <mkdir dir="target/dist/logs"/>
        <ant dir="../services" target="dist"/>
        <ant dir="../samples" target="dist"/>
        <mkdir dir="${project.dist}"/>
        <zip destfile="${project.dist}/${module.name}-${product.version}.zip"
            basedir="target/dist"/>
    </target>

    <target name="dist-src">
        <echo message="Creating ${module.name}-${product.version}-src.zip"/>
        <mkdir dir="${project.dist}"/>
        <zip destfile="${project.dist}/${module.name}-${product.version}-src.zip">
            <zipfileset dir="..">
                <exclude name="server/dist/**"/>
                <exclude name="server/target/**"/>
                <exclude name="server/logs/**"/>
                <exclude name="dist/**"/>
                <exclude name="target/**"/>
                <exclude name="logs/**"/>
            </zipfileset>
        </zip>
        <echo message="Creating ${module.name}-${product.version}-src.tar.gz"/>
        <mkdir dir="target"/>
        <tar destfile="${project.dist}/${module.name}-${product.version}-src.tar.gz" compression="gzip">
            <tarfileset dir=".." prefix="${module.name}-${product.version}">
                <exclude name="server/dist/**"/>
                <exclude name="server/target/**"/>
                <exclude name="server/logs/**"/>
                <exclude name="dist/**"/>
                <exclude name="target/**"/>
                <exclude name="logs/**"/>
            </tarfileset>
        </tar>
    </target>

    <target name="dist-macosx" depends="docs,dist" if="isMac">
        <echo message="Creating ${module.name}-${product.version}.pkg"/>
        <mkdir dir="target/${module.name}-${product.version}.dmg"/>
        <exec executable="/Developer/Applications/Utilities/PackageMaker.app/Contents/MacOS/PackageMaker">
            <arg line="-build"/>
            <arg line="-proj server/installer/${module.name}.pmproj"/>
            <arg line="-p server/target/${module.name}-${product.version}.dmg/${module.name}-${product.version}.pkg"/>
        </exec>
        <echo message="Creating ${module.name}-${product.version}.dmg"/>
        <mkdir dir="${project.dist}"/>
        <exec executable="/usr/bin/hdiutil">
            <arg line="create"/>
            <arg line="-fs HFS+"/>
            <arg line="-srcdir target/${module.name}-${product.version}.dmg"/>
            <arg line="${project.dist}/${module.name}-${product.version}.dmg"/>
        </exec>
<!--
        <exec executable="server/tools/pkg-dmg">
            <arg line="- -source target/${module.name}-${product.version}.dmg"/>
            <arg line="- -target ${module.name}-${product.version}.dmg"/>
            <arg line="- -volname &quot;Penrose Server ${product.version}&quot;"/>
            <arg line="- -mkdir /.background"/>
            <arg line="- -icon images/PenroseDMG.icns"/>
            <arg line="- -license target/LICENSE.txt"/>
            <arg line="- -copy images/background.png:/.background/background.png"/>
            <arg line="- -copy server/installer/DSStore:/.DS_Store"/>
            <arg line="- -verbosity 2"/>
        </exec>
-->

    </target>

    <target name="dist-unix" depends="docs,dist" if="isUnix">
        <echo message="Creating ${module.name}-${product.version}.tar.gz"/>
        <mkdir dir="target"/>
        <tar destfile="${project.dist}/${module.name}-${product.version}.tar.gz" compression="gzip">
            <tarfileset dir="target/dist" prefix="${module.name}-${product.version}" mode="755">
                <include name="bin/*.sh"/>
            </tarfileset>
            <tarfileset dir="target/dist" prefix="${module.name}-${product.version}">
                <include name="**/*"/>
                <exclude name="bin/*.sh"/>
            </tarfileset>
        </tar>
        <antcall target="rpm">
            <param name="rpm.prefix" value=""/>
            <param name="rpm.home" value="/usr/src/redhat"/>
            <param name="rpm.builder" value="/usr/bin/rpmbuild"/>
            <param name="rpm.spec" value="${module.name}.spec"/>
            <param name="rpm.name" value="${module.name}-${product.version}-1.i386.rpm"/>
        </antcall>
    </target>

    <target name="dist-win32" depends="docs,dist" if="isWindows">
        <echo message="Creating ${module.name}-${product.version}.exe"/>
        <copy todir="target" file="installer/${module.name}.iss">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <mkdir dir="${project.dist}"/>
        <exec executable="${iscc.path}">
            <arg line="/Q target/${module.name}.iss"/>
        </exec>
        <antcall target="rpm">
            <param name="rpm.prefix" value="${cygwin.home}"/>
            <param name="rpm.home" value="${cygwin.home}/usr/src/rpm"/>
            <param name="rpm.builder" value="${cygwin.home}/lib/rpm/rpmb.exe"/>
            <param name="rpm.spec" value="${module.name}.spec"/>
            <param name="rpm.name" value="${module.name}-${product.version}-1.cygwin.i386.rpm"/>
        </antcall>
    </target>

    <target name="rpm" depends="rpm-check,rpm-build">
    </target>

    <target name="rpm-check" depends="init">
        <echo message="Checking ${rpm.builder}"/>
        <condition property="hasRpmBuilder">
            <available file="${rpm.builder}"/>
        </condition>
    </target>

    <target name="rpm-build" depends="dist-src" if="hasRpmBuilder">
        <copy todir="target" file="installer/${rpm.spec}">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <copy todir="${rpm.home}/SOURCES" overwrite="true"
            file="${project.dist}/${module.name}-${product.version}-src.tar.gz">
        </copy>
        <exec executable="${rpm.builder}">
            <arg line="-bb target/${rpm.spec}"/>
        </exec>
        <copy todir="${project.dist}" failonerror="false"
            file="${rpm.home}/RPMS/i386/${rpm.name}">
        </copy>
    </target>

    <target name="dist-all" depends="dist-macosx,dist-unix,dist-win32">
        <copy todir="${project.dist}"
            file="target/${module.name}-${product.version}.jar">
        </copy>
    </target>

    <target name="check-install">
        <mkdir dir="${penrose.home}"/>
        <condition property="penrose.conf.missing">
          <not>
            <available file="${penrose.home}/conf/server.xml"/>
          </not>
        </condition>
    </target>

    <target name="install-conf" if="penrose.conf.missing">
        <echo message="Installing configuration files."/>
        <copy todir="${penrose.home}">
            <fileset dir="target/dist">
                <include name="conf/**/*"/>
            </fileset>
        </copy>
    </target>

    <target name="install" depends="init,check-install,install-conf">
        <delete failonerror="false">
            <fileset dir="${penrose.home}" includes="lib/*"/>
            <fileset dir="${penrose.home}" includes="server/lib/*"/>
        </delete>
        <copy todir="${penrose.home}" overwrite="true">
            <fileset dir="target/dist">
                <exclude name="conf/**/*"/>
                <exclude name="samples/**/*"/>
                <exclude name="services/**/*"/>
            </fileset>
        </copy>
        <ant dir="../services" target="install"/>
        <ant dir="../samples" target="install"/>
        <chmod dir="${penrose.home}" perm="ugo+rw" includes="**/*"/>
        <chmod dir="${penrose.home}/bin" perm="ugo+rx" includes="**/*.sh"/>
    </target>

    <target name="uninstall" depends="init">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${penrose.home}/bin" includes="**/*"/>
            <fileset dir="${penrose.home}/conf/default" includes="*"/>
            <fileset dir="${penrose.home}/docs" includes="**/*"/>
            <fileset dir="${penrose.home}/lib" includes="*"/>
            <fileset dir="${penrose.home}/samples" includes="**/*"/>
            <fileset dir="${penrose.home}/schema" includes="**/*"/>
            <fileset dir="${penrose.home}" includes="*"/>
        </delete>
    </target>

    <target name="clean" depends="init">
        <delete dir="target" failonerror="false"/>
        <ant dir="../services" target="clean"/>
        <ant dir="../samples" target="clean"/>
    </target>

</project>
