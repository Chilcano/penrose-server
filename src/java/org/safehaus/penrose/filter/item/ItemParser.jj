options {
	LOOKAHEAD              = 10;
	FORCE_LA_CHECK         = true;
	SANITY_CHECK           = true;
	DEBUG_PARSER           = true;
	DEBUG_TOKEN_MANAGER    = true;
	STATIC                 = false;
}

PARSER_BEGIN(ItemParser)

/**
 * Copyright (c) 1998-2005, Verge Lab., LLC.
 * All rights reserved.
 */
package org.safehaus.penrose.filter.item;

import org.safehaus.penrose.filter.Filter;
import org.safehaus.penrose.filter.SimpleFilter;
import org.safehaus.penrose.filter.SubstringFilter;
import org.safehaus.penrose.filter.PresentFilter;

import java.util.*;

/**
<pre>

   See: http://www.faqs.org/rfcs/rfc2254.html

        item       = simple / present / substring / extensible
        simple     = attr filtertype value
        filtertype = equal / approx / greater / less
        equal      = "="
        approx     = "~="
        greater    = ">="
        less       = "<="
        extensible = attr [":dn"] [":" matchingrule] ":=" value
                     / [":dn"] ":" matchingrule ":=" value
        present    = attr "=*"
        substring  = attr "=" [initial] any [final]
        initial    = value
        any        = "*" *(value "*")
        final      = value
        attr       = AttributeDescription from Section 4.1.5 of [1]
        matchingrule = MatchingRuleId from Section 4.1.9 of [1]
        value      = AttributeValue from Section 4.1.6 of [1]

   If a value should contain any of the following characters

           Character       ASCII value
           ---------------------------
           *               0x2a
           (               0x28
           )               0x29
           \               0x5c
           NUL             0x00

   the character must be encoded as the backslash '\' character (ASCII
   0x5c) followed by the two hexadecimal digits representing the ASCII
   value of the encoded character. The case of the two hexadecimal
   digits is not significant.
   
   Example usage:
   
   Reader in = ...;
   ItemParser parser = new ItemParser(in);
   try {
     Filter filter = parser.parse();
   } catch (ParseException ex) {
     System.out.println(ex.getMessage());
   }

</pre>
*/

public class ItemParser {

  Filter parsedItem;
  
  public Filter getItem() { return this.parsedItem; }
  
  public Filter parse() throws ParseException {
    parsedItem = Item();
    return parsedItem;
  }
  
}

PARSER_END(ItemParser)

SKIP :
{
  "\t"
| "\n"
| "\r"
}

TOKEN :
{
	< ANY : "*" >
|	< COLON : ":" >
|	< SPACE : " " >
}

TOKEN :
{
	< TYPE : ( "=" | "~=" | ">=" | "<=" | ":=" ) >
}

TOKEN :
{
	< MATCHINGRULE : <DIGIT> ("." <DIGIT>)* >
|	< #DIGIT : (["0"-"9"])+ >
}

TOKEN :
{
	< ATTR : (["A"-"Z","a"-"z","_",":","0"-"9","*"])(["A"-"Z","a"-"z","_","0"-"9",":",".","*"])* >
}

TOKEN :
{
	< VALUE : (~["(",")","=",":"])+ >
}

Filter Item() :
{
	Filter filter;
	Token attr, type, value;
	String valueStr = "";
}
{
    attr = <ATTR>
    type = <TYPE>
    value = <VALUE>
    {
        valueStr += value.toString();
        if (!"=".equals(type.toString())) {
            filter = new SimpleFilter(attr.toString(), type.toString(), valueStr);

        } else if ("*".equals(valueStr)) {
                filter = new PresentFilter(attr.toString());

        } else if (valueStr.indexOf('*') < 0) {
            filter = new SimpleFilter(attr.toString(), "=", valueStr);

        } else {
            List values = new ArrayList();
            StringTokenizer st = new StringTokenizer(valueStr, "*", true);
            while (st.hasMoreTokens()) {
                values.add(st.nextToken());
            }
            filter = new SubstringFilter(attr.toString(), values);
        }
    }
	{ return filter; }
}
